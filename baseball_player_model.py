from sqlalchemy import Column, Integer, String, Float
from sqlalchemy.ext.declarative import declarative_base
import math
import json
Base = declarative_base()


class Player(Base):
    __tablename__ = 'player'

    playerid = Column(Integer, nullable=False, primary_key=True)
    Name = Column(String(30), nullable=False)
    Birth_Year = Column(Integer)




class Batter(Base):
    __tablename__ = 'batter'

    Team = Column(String(30))
    Year = Column(Integer, nullable=False, primary_key=True)
    Age = Column(Integer)
    G = Column(Integer)
    AB = Column(Integer)
    PA = Column(Integer)
    H = Column(Integer)
    Single_Bat = Column(Integer)
    Double_Bat = Column(Integer)
    Triple_Bat = Column(Integer)
    HR = Column(Integer)
    R = Column(Integer)
    RBI = Column(Integer)
    BB = Column(Integer)
    IBB = Column(Integer)
    SO = Column(Integer)
    HBP = Column(Integer)
    SF = Column(Integer)
    SH = Column(Integer)
    GDP = Column(Integer)
    SB = Column(Integer)
    CS = Column(Integer)
    AVG = Column(Float)
    GB = Column(Integer)
    FB = Column(Integer)
    LD = Column(Integer)
    IFFB = Column(Integer)
    Pitches = Column(Integer)
    Balls = Column(Integer)
    Strikes = Column(Integer)
    IFH = Column(Integer)
    BU = Column(Integer)
    BUH = Column(Integer)
    BB_Percentage = Column(Float)
    K_Percentage = Column(Float)
    BB_Divided_By_K = Column(Float)
    OBP = Column(Float)
    SLG = Column(Float)
    OPS = Column(Float)
    ISO = Column(Float)
    BABIP = Column(Float)
    GB_Divided_By_FB = Column(Float)
    LD_Percentage = Column(Float)
    GB_Percentage = Column(Float)
    FB_Percentage = Column(Float)
    IFFB_Percentage = Column(Float)
    HR_Divided_By_FB = Column(Float)
    IFH_Percentage = Column(Float)
    BUH_Percentage = Column(Float)
    wOBA = Column(Float)
    wRAA = Column(Float)
    wRC = Column(Integer)
    Bat = Column(Float)
    Fld = Column(Float)
    Rep = Column(Float)
    Pos = Column(Float)
    RAR = Column(Float)
    WAR = Column(Float)
    Dol = Column(Float)
    Spd = Column(Float)
    wRC_Plus = Column(Integer)
    WPA = Column(Float)
    Minus_WPA = Column(Float)
    Plus_WPA = Column(Float)
    RE24 = Column(Float)
    REW = Column(Float)
    pLI = Column(Float)
    phLI = Column(Float)
    PH = Column(Integer)
    WPA_Divided_By_LI = Column(Float)
    Clutch = Column(Float)
    FBv = Column(Float)
    SL_Percentage = Column(Float)
    SLv = Column(Float)
    CT_Percentage = Column(Float)
    CTv = Column(Float)
    CB_Percentage = Column(Float)
    CBv = Column(Float)
    CH_Percentage = Column(Float)
    CHv = Column(Float)
    SF_Percentage = Column(Float)
    SFv = Column(Float)
    KN_Percentage = Column(Float)
    KNv = Column(Float)
    XX_Percentage = Column(Float)
    PO_Percentage = Column(Float)
    wFB = Column(Float)
    wSL = Column(Float)
    wCT = Column(Float)
    wCB = Column(Float)
    wCH = Column(Float)
    wSF = Column(Float)
    wKN = Column(Float)
    wFB_Divided_By_C = Column(Float)
    wSL_Divided_By_C = Column(Float)
    wCT_Divided_By_C = Column(Float)
    wCB_Divided_By_C = Column(Float)
    wCH_Divided_By_C = Column(Float)
    wSF_Divided_By_C = Column(Float)
    wKN_Divided_By_C = Column(Float)
    O_Swing_Percentage = Column(Float)
    Z_Swing_Percentage = Column(Float)
    Swing_Percentage = Column(Float)
    O_Contact_Percentage = Column(Float)
    Z_Contact_Percentage = Column(Float)
    Contact_Percentage = Column(Float)
    Zone_Percentage = Column(Float)
    F_Strike_Percentage = Column(Float)
    SwStr_Percentage = Column(Float)
    BsR = Column(Float)
    FA_Percentage_pfx = Column(Float)
    FT_Percentage_pfx = Column(Float)
    FC_Percentage_pfx = Column(Float)
    FS_Percentage_pfx = Column(Float)
    FO_Percentage_pfx = Column(Float)
    SI_Percentage_pfx = Column(Float)
    SL_Percentage_pfx = Column(Float)
    CU_Percentage_pfx = Column(Float)
    KC_Percentage_pfx = Column(Float)
    EP_Percentage_pfx = Column(Float)
    CH_Percentage_pfx = Column(Float)
    SC_Percentage_pfx = Column(Float)
    KN_Percentage_pfx = Column(Float)
    UN_Percentage_pfx = Column(Float)
    vFA_pfx = Column(Float)
    vFT_pfx = Column(Float)
    vFC_pfx = Column(Float)
    vFS_pfx = Column(Float)
    vFO_pfx = Column(Float)
    vSI_pfx = Column(Float)
    vSL_pfx = Column(Float)
    vCU_pfx = Column(Float)
    vKC_pfx = Column(Float)
    vEP_pfx = Column(Float)
    vCH_pfx = Column(Float)
    vSC_pfx = Column(Float)
    vKN_pfx = Column(Float)
    FA_X_pfx = Column(Float)
    FT_X_pfx = Column(Float)
    FC_X_pfx = Column(Float)
    FS_X_pfx = Column(Float)
    FO_X_pfx = Column(Float)
    SI_X_pfx = Column(Float)
    SL_X_pfx = Column(Float)
    CU_X_pfx = Column(Float)
    KC_X_pfx = Column(Float)
    EP_X_pfx = Column(Float)
    CH_X_pfx = Column(Float)
    SC_X_pfx = Column(Float)
    KN_X_pfx = Column(Float)
    FA_Z_pfx = Column(Float)
    FT_Z_pfx = Column(Float)
    FC_Z_pfx = Column(Float)
    FS_Z_pfx = Column(Float)
    FO_Z_pfx = Column(Float)
    SI_Z_pfx = Column(Float)
    SL_Z_pfx = Column(Float)
    CU_Z_pfx = Column(Float)
    KC_Z_pfx = Column(Float)
    EP_Z_pfx = Column(Float)
    CH_Z_pfx = Column(Float)
    SC_Z_pfx = Column(Float)
    KN_Z_pfx = Column(Float)
    wFA_pfx = Column(Float)
    wFT_pfx = Column(Float)
    wFC_pfx = Column(Float)
    wFS_pfx = Column(Float)
    wFO_pfx = Column(Float)
    wSI_pfx = Column(Float)
    wSL_pfx = Column(Float)
    wCU_pfx = Column(Float)
    wKC_pfx = Column(Float)
    wEP_pfx = Column(Float)
    wCH_pfx = Column(Float)
    wSC_pfx = Column(Float)
    wKN_pfx = Column(Float)
    wFA_Divided_By_C_pfx = Column(Float)
    wFT_Divided_By_C_pfx = Column(Float)
    wFC_Divided_By_C_pfx = Column(Float)
    wFS_Divided_By_C_pfx = Column(Float)
    wFO_Divided_By_C_pfx = Column(Float)
    wSI_Divided_By_C_pfx = Column(Float)
    wSL_Divided_By_C_pfx = Column(Float)
    wCU_Divided_By_C_pfx = Column(Float)
    wKC_Divided_By_C_pfx = Column(Float)
    wEP_Divided_By_C_pfx = Column(Float)
    wCH_Divided_By_C_pfx = Column(Float)
    wSC_Divided_By_C_pfx = Column(Float)
    wKN_Divided_By_C_pfx = Column(Float)
    O_Swing_Percentage_pfx = Column(Float)
    Z_Swing_Percentage_pfx = Column(Float)
    Swing_Percentage_pfx = Column(Float)
    O_Contact_Percentage_pfx = Column(Float)
    Z_Contact_Percentage_pfx = Column(Float)
    Contact_Percentage_pfx = Column(Float)
    Zone_Percentage_pfx = Column(Float)
    Pace = Column(Float)
    Def = Column(Float)
    wSB = Column(Float)
    UBR = Column(Float)
    Age_Rng = Column(String(30))
    Off = Column(Float)
    Lg = Column(Float)
    wGDP = Column(Float)
    Pull_Percentage = Column(Float)
    Cent_Percentage = Column(Float)
    Oppo_Percentage = Column(Float)
    Soft_Percentage = Column(Float)
    Med_Percentage = Column(Float)
    Hard_Percentage = Column(Float)


    ommited_fields = ('Name', 'Team', 'Year', 'Age', 'Age_Rng', 'playerid')

    def no_condition_manhatten_distance(self, comp_batter):
        # only compare float part, since G is different the integer part will be meaningless.
        distance = 0
        for key in self.__dict__:
            if key in comp_batter.__dict__ and isinstance(comp_batter.__dict__[key], float) \
                    and self.__dict__[key] is not None and comp_batter.__dict__[key] is not None:
                if "Percentage" in key:
                    distance += abs(comp_batter.__dict__[key]/100 - self.__dict__[key]/100)
                else:
                    distance += abs(comp_batter.__dict__[key] - self.__dict__[key])

        return distance

    def no_condition_euclidean_distance(self, comp_batter):
        distance = 0
        for key in self.__dict__:
            if key in comp_batter.__dict__ and isinstance(comp_batter.__dict__[key], float) \
                    and self.__dict__[key] is not None and comp_batter.__dict__[key] is not None:
                if "Percentage" in key:
                    distance += ((comp_batter.__dict__[key]/100 - self.__dict__[key]/100) ** 2)
                else:
                    distance += ((comp_batter.__dict__[key] - self.__dict__[key]) ** 2)

        return math.sqrt(distance)

    def no_condition_minkowski_distance(self, comp_batter, p):
        assert p is not None and p != 0
        distance = 0
        for key in self.__dict__:
            if key in comp_batter.__dict__ and isinstance(comp_batter.__dict__[key], float) \
                    and self.__dict__[key] is not None and comp_batter.__dict__[key] is not None:
                if "Percentage" in key:
                    distance += ((comp_batter.__dict__[key]/100 - self.__dict__[key]/100) ** p)
                else:
                    distance += ((comp_batter.__dict__[key] - self.__dict__[key]) ** p)

        return distance ** float((1.0/p))